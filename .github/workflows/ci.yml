name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff
    
    - name: Generate test JWT keys
      run: |
        # Generate RSA key pair for testing
        openssl genrsa -out test_private.pem 2048
        openssl rsa -in test_private.pem -pubout -out test_public.pem
        
        # Export as environment variables for tests
        echo "JWT_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
        cat test_private.pem >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "JWT_PUBLIC_KEY<<EOF" >> $GITHUB_ENV
        cat test_public.pem >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        # Clean up key files
        rm test_private.pem test_public.pem
    
    - name: Run linting with ruff
      run: |
        # Check formatting and linting
        ruff check 1-training/ 2-ml-service/ shared/
        ruff format --check 1-training/ 2-ml-service/ shared/
    
    - name: Generate models for testing
      run: |
        # Generate models needed for tests
        cd 1-training
        python train.py
        cd ..
    
    - name: Run unit tests
      run: |
        cd 2-ml-service
        python -m pytest tests/unit/ -v --tb=short
    
    - name: Run integration tests
      run: |
        cd 2-ml-service
        python -m pytest tests/integration/ -v --tb=short
    
    - name: Run all tests with coverage
      run: |
        cd 2-ml-service
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./2-ml-service/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]
    
    - name: Run safety check for known vulnerabilities
      run: |
        safety check --json || true
    
    - name: Run bandit security linter
      run: |
        bandit -r 2-ml-service/app/ -f json || true

  build-test:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate test JWT keys
      run: |
        # Generate RSA key pair for testing
        openssl genrsa -out test_private.pem 2048
        openssl rsa -in test_private.pem -pubout -out test_public.pem
        
        # Export as environment variables for tests
        echo "JWT_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
        cat test_private.pem >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "JWT_PUBLIC_KEY<<EOF" >> $GITHUB_ENV
        cat test_public.pem >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        # Clean up key files
        rm test_private.pem test_public.pem
    
    - name: Generate models
      run: |
        cd 1-training
        python train.py
        cd ..
    
    - name: Test service startup
      run: |
        cd 2-ml-service
        # Test that the service can start up successfully
        timeout 10s python main.py || if [ $? -eq 124 ]; then echo "Service started successfully"; else exit 1; fi
    
